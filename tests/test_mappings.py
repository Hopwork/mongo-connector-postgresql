# -*- coding: utf-8 -*-

from unittest import TestCase, main

from mongo_connector.doc_managers import mappings


class TestPostgreSQLMappings(TestCase):
    def test_clean_and_flatten_doc(self):
        mapping = {
            'foo': {
                'bar': {
                    'a': {'type': 'INT'},
                    'b.c.d': {'type': 'INT'},
                    'e': {'type': '_ARRAY_OF_SCALARS'},
                    'e.0': {'type': 'INT'},
                    'e.1': {'type': 'INT'},
                    'e.2': {'type': 'INT'}
                }
            }
        }
        doc = {
            'a': 2,
            'b': {
                'c': {
                    'd': 5
                }
            },
            'e': [6, 7, 8]
        }
        expected = {
            'a': 2,
            'b.c.d': 5,
            'e.0': 6,
            'e.1': 7,
            'e.2': 8
        }
        got = mappings._clean_and_flatten_doc(mapping, doc, 'foo.bar')
        self.assertEqual(got, expected)

        got = mappings._clean_and_flatten_doc(mapping, doc, 'foo.baz')
        self.assertEqual(got, {})

        got = mappings._clean_and_flatten_doc(mapping, doc, 'bar.baz')
        self.assertEqual(got, {})

    def get_mapped_document(self):
        mapping = {
            'foo': {
                'bar': {
                    'a': {'type': 'INT'},
                    'b.c.d': {'type': 'INT', 'dest': 'bcd'},
                    'e': {'type': '_ARRAY_OF_SCALARS'},
                    'e.0': {'type': 'INT', 'dest': 'e0'},
                    'e.1': {'type': 'INT', 'dest': 'e1'},
                    'e.2': {'type': 'INT', 'dest': 'e2'}
                }
            }
        }
        doc = {
            'a': 2,
            'b': {
                'c': {
                    'd': 5
                }
            },
            'e': [6, 7, 8]
        }
        expected = {
            'a': 2,
            'bcd': 5,
            'e0': 6,
            'e1': 7,
            'e2': 8
        }
        got = mappings.get_mapped_field(mapping, doc, 'foo.bar')
        self.assertEqual(got, expected)

    def test_get_mapped_field(self):
        mapping = {
            'foo': {
                'bar': {
                    'foo': {
                        'dest': 'bar'
                    }
                }
            }
        }
        got = mappings.get_mapped_field(mapping, 'foo.bar', 'foo')
        self.assertEqual(got, 'bar')

    def test_get_primary_key(self):
        mapping = {
            'foo': {
                'bar': {
                    'pk': '_id'
                }
            }
        }
        got = mappings.get_primary_key(mapping, 'foo.bar')
        self.assertEqual(got, '_id')

    def test_is_mapped(self):
        mapping = {
            'foo': {
                'bar': {
                    'foo': {'type': 'TEXT'}
                }
            }
        }
        got = mappings.is_mapped(mapping, 'foo.bar', field_name=None)
        self.assertTrue(got)

        got = mappings.is_mapped(mapping, 'foo.baz', field_name=None)
        self.assertFalse(got)

        got = mappings.is_mapped(mapping, 'bar.baz', field_name=None)
        self.assertFalse(got)

        got = mappings.is_mapped(mapping, 'foo.bar', field_name='foo')
        self.assertTrue(got)

        got = mappings.is_mapped(mapping, 'foo.bar', field_name='bar')
        self.assertFalse(got)

    def test_is_id_autogenerated(self):
        mapping = {
            'foo': {
                'bar': {
                    'pk': 'id'
                }
            }
        }
        got = mappings.is_id_autogenerated(mapping, 'foo.bar')
        self.assertTrue(got)

        mapping['foo']['bar']['_id'] = {'dest': 'id'}
        got = mappings.is_id_autogenerated(mapping, 'foo.bar')
        self.assertFalse(got)

    def test_scalar_array_fields(self):
        mapping = {
            'foo': {
                'bar': {
                    'test': {
                        'type': '_ARRAY_OF_SCALARS'
                    }
                },
                'baz': {
                    'test': {'type': 'TEXT'}
                }
            }
        }
        got = mappings.get_scalar_array_fields(mapping, 'foo', 'bar')
        self.assertEqual(got, ['test'])

        got = mappings.get_scalar_array_fields(mapping, 'foo', 'baz')
        self.assertEqual(got, [])

        got = mappings.get_scalar_array_fields(mapping, 'foo', 'biz')
        self.assertEqual(got, [])

        got = mappings.get_scalar_array_fields(mapping, 'bar', 'baz')
        self.assertEqual(got, [])


if __name__ == '__main__':
    main()
